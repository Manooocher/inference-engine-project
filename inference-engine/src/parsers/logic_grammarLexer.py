# Generated from logic_grammar.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info >= (3, 5):
    from typing import TextIO
else:
    from typing.io import TextIO

def serializedATN():
    return [
        4,0,10,75,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,40,8,3,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,54,8,4,1,5,1,5,1,5,1,5,1,6,4,
        6,61,8,6,11,6,12,6,62,1,7,1,7,1,8,1,8,1,9,4,9,70,8,9,11,9,12,9,71,
        1,9,1,9,0,0,10,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,1,0,
        4,2,0,65,90,97,122,1,0,97,122,1,0,65,90,3,0,9,10,13,13,32,32,79,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,1,21,
        1,0,0,0,3,23,1,0,0,0,5,25,1,0,0,0,7,39,1,0,0,0,9,53,1,0,0,0,11,55,
        1,0,0,0,13,60,1,0,0,0,15,64,1,0,0,0,17,66,1,0,0,0,19,69,1,0,0,0,
        21,22,5,40,0,0,22,2,1,0,0,0,23,24,5,41,0,0,24,4,1,0,0,0,25,26,5,
        44,0,0,26,6,1,0,0,0,27,28,5,102,0,0,28,29,5,111,0,0,29,30,5,114,
        0,0,30,31,5,97,0,0,31,32,5,108,0,0,32,40,5,108,0,0,33,34,5,101,0,
        0,34,35,5,120,0,0,35,36,5,105,0,0,36,37,5,115,0,0,37,38,5,116,0,
        0,38,40,5,115,0,0,39,27,1,0,0,0,39,33,1,0,0,0,40,8,1,0,0,0,41,42,
        5,97,0,0,42,43,5,110,0,0,43,54,5,100,0,0,44,45,5,111,0,0,45,54,5,
        114,0,0,46,47,5,105,0,0,47,48,5,109,0,0,48,49,5,112,0,0,49,50,5,
        108,0,0,50,51,5,105,0,0,51,52,5,101,0,0,52,54,5,115,0,0,53,41,1,
        0,0,0,53,44,1,0,0,0,53,46,1,0,0,0,54,10,1,0,0,0,55,56,5,110,0,0,
        56,57,5,111,0,0,57,58,5,116,0,0,58,12,1,0,0,0,59,61,7,0,0,0,60,59,
        1,0,0,0,61,62,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,14,1,0,0,0,
        64,65,7,1,0,0,65,16,1,0,0,0,66,67,7,2,0,0,67,18,1,0,0,0,68,70,7,
        3,0,0,69,68,1,0,0,0,70,71,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,
        73,1,0,0,0,73,74,6,9,0,0,74,20,1,0,0,0,6,0,39,53,62,71,1,6,0,0
    ]

class logic_grammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    QUANTIFIER = 4
    BINARY_OP = 5
    NOT = 6
    PREDICATE = 7
    VARIABLE = 8
    CONSTANT = 9
    WS = 10

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "','", "'not'" ]

    symbolicNames = [ "<INVALID>",
            "QUANTIFIER", "BINARY_OP", "NOT", "PREDICATE", "VARIABLE", "CONSTANT", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "QUANTIFIER", "BINARY_OP", "NOT", 
                  "PREDICATE", "VARIABLE", "CONSTANT", "WS" ]

    grammarFileName = "logic_grammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None